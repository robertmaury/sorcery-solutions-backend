name: Build/Scan/Push Containers

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - wiz-os
    paths:
      - "**.py"
      - Dockerfile
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  docker_build:
    runs-on: ubuntu-latest
    env:
      WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
      WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./
            image: ${{ startsWith(vars.REPO, vars.REGISTRY) && vars.REPO || format('{0}/{1}', vars.REGISTRY, vars.REPO) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Collect Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=sha,format=short

      - name: Get First Docker Tag
        id: first-tag
        run: |
          first_tag=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | tr -d '\r' | xargs)
          echo "tag=${first_tag}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Container Registry
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          ecr: true

      # - name: Log in to Container Registry
      #   if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ vars.REGISTRY }}

      - name: Build Docker Image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ matrix.dockerfile }}
          load: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan Container with Wiz
        run: |
          curl -Lo wizcli https://wizcli.app.wiz.io/latest/wizcli-linux-amd64
          chmod +x wizcli
          ./wizcli auth
          ./wizcli docker scan --image "${{ steps.first-tag.outputs.tag }}" --dockerfile "${{ matrix.dockerfile }}Dockerfile"
        continue-on-error: true

      - name: Push Docker Image
        id: push-image
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Pull Image for Wiz Tagging
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          docker pull ${{ steps.first-tag.outputs.tag }}

      - name: Tag Container with Wiz
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          ./wizcli docker tag --image "${{ steps.first-tag.outputs.tag }}"
        continue-on-error: true

      - name: ðŸ’¾ Install kubectl
        uses: azure/setup-kubectl@v3

      - name: ðŸ’¾ Install Helm
        uses: azure/setup-helm@v4

      - name: ðŸ“¡ Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: ðŸš€ Deploy Backend via Helm
        run: |
          helm upgrade --install backend ./helm/sorcery-solutions-backend \
            --namespace sorcery \
            --create-namespace \
            --set image.repository=${{ matrix.image }} \
            --set image.tag="${{ steps.first-tag.outputs.tag }}" \
            --set-json 'env=[{"name":"MONGO_URI","value":"${{ secrets.MONGO_URI}}"},{"name":"MONGO_DB","value":"${{secrets.MONGO_DB}}"}]' \
            --wait
